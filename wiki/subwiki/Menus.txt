= Menus =

This example demonstrates options menu, Form Item context menu, and !PopupList component.

== Options menu ==

[[Image(options_menu_1.png)]] [[Image(options_menu_2.png)]]

Options menu is created by adding Commands to a Form. The highest priority Command will be displayed as a button, while the lower priority Commands will be available in the menu.

The options menu is implemented in class !OptionsMenuView.

{{{#!java
public class OptionsMenuView
        extends Form {
    
    public OptionsMenuView(MIDlet parent, CommandListener commandListener) {
        super("Options menu");
        
        // The highest priority command is mapped to a button
        Command buttonCommand = new Command("Highest prio. cmd", Command.SCREEN, 0);
        addCommand(buttonCommand);
        
        // The rest appear in menu
        Command menuCommand1 = new Command("Command 2", Command.SCREEN, 1);
        addCommand(menuCommand1);
        Command menuCommand2 = new Command("Command 3", Command.SCREEN, 2);
        addCommand(menuCommand2);
        Command menuCommand3 = new Command("Command 4", Command.SCREEN, 3);
        addCommand(menuCommand3);
        
        addCommand(Commands.BACK);

        setCommandListener(commandListener);
    }
}
}}}

== Context menu ==

[[Image(context_menu_1.png)]] [[Image(context_menu_2.png)]]

The Commands added to Form Items are displayed in a popup context menu when long-pressing the Item.

{{{#!java
CustomListItem cli = new CustomListItem("Item " + itemCounter, null);
Command removeItemCommand = new Command("Remove " + cli.getText(),
        Command.ITEM,
        0);
cli.addCommand(removeItemCommand);
// The listener callback function commandAction is called when the removeItemCommand is triggered
cli.setItemCommandListener(listener);
append(cli);
}}}

== !PopupList ==

[[Image(popuplist_1.png)]] [[Image(popuplist_2.png)]]

!PopupList component is useful when you need to explicitly control when to show/hide the menu. You can use !PopupList e.g. for showing context menu for a selection on a Canvas.

In the example the !PopupList is created and shown on showContextMenu method of !GridLayoutWithContextMenu class, which is an inner class of !PopupListView and extends !GridLayout. The method is called when the grid is long-pressed.

{{{#!java
PopupList popupList = new PopupList();
PopupListItem deleteItem = new PopupListItem("Remove " + getSelectedItem().getString());
popupList.setListener(new PopupListListener() {

    public void itemSelected(PopupList list, PopupListItem item) {
        removeItem(getSelectedItem());
    }

    public void listDismissed(PopupList list) {
        getSelectedItem().setHighlight(false);
        repaint();
    }

});                    
popupList.appendItem(deleteItem);
popupList.setVisible(true);
}}}