= Lists =
Demonstrates the different List styles in LCDUI.

== Design == #Design
This example shows different versions of a list.

 * The implicit list should be used for drill downs; the list closes after an item is selected.
 * The exclusive + confirm list should be used for selecting one item (and one item must always be selected); Back discards the selection, and “done” in Action !#1 confirms the selection.
 * The multiple list should be used for selecting no items, one item, or multiple items; Back discards the selection, and “done” from Options menu confirms the selection.
 * Truncated shows an implicit list where the list items are truncated so that they can each fit into one row. Try rotating the phone to see how the content of the row is extended.
 * Thumbnails shows an implicit list with additional thumbnails for each item. Thumbnails are aligned to the left of the list. 
 * Fancy list shows how to customise appearance of items of a list.
 * Grid list shows how to present a list in a grid form.

For more information on Lists, please see the [https://www.developer.nokia.com/Resources/Library/Asha_UI/#!index.html Nokia Asha Design Guidelines].

The MIDlet starts in a list view listing every possible list style:

* Implicit list
* Exclusive + confirm list
* Multiselect
* Truncated list
* Implicit list with thumbnail pictures 
* List with fancy list items
* Grid list

[[Image(/files/screenshots/lists_main_portrait.png)]]

== Implementation == #Implementation
The lists are implemented using LCDUI List component, except for Fancy List which uses custom Canvas list implementation com.nokia.uihelpers.!CustomList, and Grid list which is implemented using the Grid View template from the Asha SDK (com.nokia.uihelpers.grid.!GridItem and com.nokia.uihelpers.grid.!GridLayout).

=== Implicit list ===

|| [[Image(/files/screenshots/auicd_1.0.0_lists_implicit_portrait.png)]] [[Image(/files/screenshots/auicd_1.0.0_lists_implicit_landscape.png)]] ||

Implicit lists are created by setting the List's type to List.IMPLICIT. Implicit lists can (and most probably will) have a select command that is triggered whenever a list item is tapped on. The select command can be set in code like this:

{{{#!java
if (type == List.IMPLICIT) {
    // For implicit list a select command needs to be defined
    // to allow triggering events
    demoList.setSelectCommand(List.LIST_SELECT);
}
}}}

=== Exclusive + confirm list ===

|| [[Image(/files/screenshots/auicd_1.0.0_lists_exclusive_confirm_portrait.png)]] [[Image(/files/screenshots/auicd_1.0.0_lists_exclusive_confirm_landscape.png)]] ||

Exclusive lists are created by setting the List's type to List.EXCLUSIVE. Exclusive lists allow selecting one option from the list, and they automatically provide the mechanism for a radio button -like behaviour (only allowing one option to be selected at a given time). List selection can be confirmed by pressing the Done button.

The selected item can be read from the List as follows: 

{{{#!java
exclusiveSelection = demoList.getSelectedIndex();
}}}

and it can be set like this:

{{{#!java
demoList.setSelectedIndex(exclusiveSelection, true);
}}}

=== Multiselect ===

|| [[Image(/files/screenshots/auicd_1.0.0_lists_multiple_portrait.png)]] [[Image(/files/screenshots/auicd_1.0.0_lists_multiple_landscape.png)]] ||

Multiselect forms allow the user to select multiple options at once, and each item can be toggled on or off. 

The selection values are grouped in a !ChoiceGroup:
{{{#!java
// Create a ChoiceGroup with a few dummy items
choiceGroup1 = new ChoiceGroup(null, Choice.MULTIPLE);
for (int i = 1; i <= ITEM_COUNT; i++) {
    choiceGroup1.append(ITEM + String.valueOf(i), null);
    }
this.append(choiceGroup1);
}}}

The selections can be obtained by the getSelectedFlags method that queries the state of a List and returns the state of all elements in the boolean array:
{{{#!java
choiceGroup1.getSelectedFlags(choiceGroup1Values);
}}}

=== Truncated list ===

|| [[Image(/files/screenshots/auicd_1.0.0_lists_truncated_portrait.png)]] [[Image(/files/screenshots/auicd_1.0.0_lists_truncated_landscape.png)]] ||

This example demonstrates implicit lists with truncated items. Text truncation/wrapping can be set by setting the fit policy for the list:

{{{#!java
demoList.setFitPolicy(List.TEXT_WRAP_OFF);
}}}

=== Implicit list with thumbnail pictures ===

|| [[Image(/files/screenshots/auicd_1.0.0_lists_thumbnails_portrait.png)]] [[Image(/files/screenshots/auicd_1.0.0_lists_thumbnails_landscape.png)]] ||

List items can also have thumbnail pictures. They have to be added to the items when adding the items to the List:

{{{#!java
// Load the images, if necessary
Image images[] = new Image[MAX_ITEMS];
for (int i = 0; i < MAX_ITEMS; i++) {
    images[i] = ImageLoader.loadThumbnail(i);
}

for (int i = 0; i < MAX_ITEMS; i++) {
    this.append("list item " + String.valueOf(i + 1), images[i]);
}
}}}

=== Fancy list ===

|| [[Image(/files/screenshots/auicd_1.0.0_lists_fancy_portrait.png)]] [[Image(/files/screenshots/auicd_1.0.0_lists_fancy_landscape.png)]] ||
|| [[Image(/files/screenshots/auicd_1.0.0_lists_fancy2_portrait.png)]] [[Image(/files/screenshots/auicd_1.0.0_lists_fancy2_landscape.png)]] ||
|| [[Image(/files/screenshots/auicd_1.0.0_lists_fancy3_landscape.png)]] ||

Fancy list example demonstrates how you can build a custom list by stacking !CustomItems on a Form. The list is implemented in !FancyListView class.

A single list item in fancy list consists of an image, a title label, content string, time string and importance level. The list item is implemented in !FancyListItem class that stores list item data and handles the drawing.

There is also a custom list item separator, that is implemented in inner Separator class of !FancyListView.

The list items are created and appended to a Form in the view constructor:

{{{#!java
for (int i = 0; i < MAX_ITEMS; i++) {
    if (i % 7 == 6) {
        append(new Separator());
    } else {
        append(new FancyListItem(
                "Title " + (itemIndex),
                "Content " + (itemIndex),
                "12:34",
                ImageLoader.loadThumbnail(i),
                i % (FancyListItem.IMPORTANCE_HIGH + 1)));
        itemIndex++;
    }
}
}}}

The !FancyListItem class stores the data and handles the drawing. The class extends !CustomListItem class. !CustomListItem is a basic list item with only a label and an image, implemented as a !CustomItem. It handles the general list item functionality, like focus highlighting.

{{{#!java
public class FancyListItem extends CustomListItem {

    public static final int IMPORTANCE_HIGH = 3;
    public static final int IMPORTANCE_MEDIUM = 2;
    public static final int IMPORTANCE_LOW = 1;
    public static final int IMPORTANCE_NONE = 0;
    
    private static final int COLOR_IMPORTANCE_HIGH = 0xd72525;
    private static final int COLOR_IMPORTANCE_MEDIUM = 0xd7b325;
    private static final int COLOR_IMPORTANCE_LOW = 0x254bd7;
    
    protected String content;
    protected String time;
    protected int importance;

    public FancyListItem(String label,
                String content,
                String time,
                Image image,
                int importance) {
        super(label, image);
        this.content = content;
        this.time = time;
        this.importance = importance;
    }
    
    protected int getMinContentHeight() {
        return 50;
    }

    protected int getPrefContentHeight(int width) {
        return 50;
    }    
    
    protected void paint(Graphics g, int w, int h) {
        int x0 = 0;
        int y0 = 0;
        
        // Draw focus highlight
        if (pressed) {
            g.setColor(HIGHLIGHT_COLOR);
            g.fillRect(0, 0, w, h);
        }
        
        // Draw the image 
        if (image != null) {
            x0 = MARGIN_LEFT;
            g.drawImage(image, x0, y0,
                Graphics.LEFT | Graphics.TOP);
            x0 += image.getWidth() + MARGIN_LEFT;
        }

        // Draw title string
        g.setColor(FOREGROUND_COLOR);
        final int lineHeight = g.getFont().getHeight();
        y0 += lineHeight;
        g.drawString(label, x0, y0, Graphics.LEFT | Graphics.BOTTOM);

        // Draw content string
        Font smallFont = Font.getFont(Font.FACE_SYSTEM, Font.STYLE_PLAIN, Font.SIZE_SMALL);
        g.setFont(smallFont);
        final int smallLineHeight = smallFont.getHeight();
        y0 += smallLineHeight;
        g.drawString(content, x0, y0, Graphics.LEFT | Graphics.BOTTOM);

        // Draw time
        int timeWidth = smallFont.stringWidth(time);
        int timeX = w - timeWidth;
        int timeY = smallLineHeight;
        g.drawString(time, timeX, timeY, Graphics.LEFT | Graphics.BOTTOM);

        // Draw importance
        boolean drawImportance = true;
        switch (importance) {
            case IMPORTANCE_HIGH:
                g.setColor(COLOR_IMPORTANCE_HIGH);
                break;
            case IMPORTANCE_MEDIUM:
                g.setColor(COLOR_IMPORTANCE_MEDIUM);
                break;
            case IMPORTANCE_LOW:
                g.setColor(COLOR_IMPORTANCE_LOW);
                break;
            default:
                // Invalid / no color, skip drawing importance
                drawImportance = false;
        }

        if (drawImportance) {
            int importanceIndicatorSize = smallFont.getHeight();
            g.fillRoundRect(timeX + timeWidth / 2 - importanceIndicatorSize / 2,
                            timeY + importanceIndicatorSize / 4,
                            importanceIndicatorSize,
                            importanceIndicatorSize,
                            importanceIndicatorSize, 
                            importanceIndicatorSize);
        }
    }
    
}
}}}

=== Grid list ===

|| [[Image(/files/screenshots/auicd_1.0.0_lists_grid_portrait.png)]] [[Image(/files/screenshots/auicd_1.0.0_lists_grid_landscape.png)]] ||

This example uses two classes that are provided with the Grid View template from the Asha SDK: com.nokia.uihelpers.grid.!GridItem and com.nokia.uihelpers.grid.!GridLayout.

The Grid view is populated by:

{{{#!java
for (int i = 0; i < GRID_ITEM_COUNT; i++) {
    String imageUri = "/image" + (i % 2 + 1) + ".png";
    GridItem gridItem = new GridItem(imageUri, "Image " + (i + 1), 50, 50);
    gridLayout.addItem(gridItem);
}
}}}

When a selection is made, itemStateChange(Item) gets called and it shows the index of selection in an Alert.

{{{#!java
public void itemStateChanged(Item item) {
    showSelectedAlert(((GridLayout) item).getSelectedItem());
}
}}}