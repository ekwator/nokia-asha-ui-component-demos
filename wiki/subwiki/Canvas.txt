= Canvas =
Demonstrates the different ways to present a Canvas.

== Design == #Design
There are different types of canvas supported:

 * With chrome; all navigation elements are already included.
 * With chrome and the category bar; all navigation elements are already included.
 * With the status bar only, no header bar and no back button; navigation elements have to be added; in this case, these buttons are added as simple buttons on the canvas.
 * In Full screen, without any chrome, navigation elements have to be added; in this case, these are added as simple buttons on the canvas. 

In addition there is a special object for editing text:

 * Canvas text editor. 

For more information on Canvas, please see the [https://www.developer.nokia.com/Resources/Library/Asha_UI/#!index.html Nokia Asha Design Guidelines].

[[Image(/files/screenshots/canvas_main_portrait.png)]]

== Implementation == #Implementation

|| [[Image(/files/screenshots/canvas_chrome_portrait.png)]] [[Image(/files/screenshots/canvas_chrome_landscape.png)]] ||
|| [[Image(/files/screenshots/canvas_chromeandcategorybar_portrait.png)]] [[Image(/files/screenshots/canvas_chromeandcategorybar_landscape.png)]] ||

The example uses the !ExampleCanvas class to display different kind of canvases. When using the canvas, it is mandatory to inherit a custom class from Canvas and implement the paint(Graphics) method:

{{{
public void paint(Graphics g) {
    // Clear the screen by drawing a white rectangle
    int w = getWidth();
    int h = getHeight();
    int textY = this.getHeight() / 4;
    int backHintY = this.getHeight() / 2;
    g.setColor(255, 255, 255); // white
    g.fillRect(0, 0, w, h);

    // Draw the text
    g.setColor(0, 51, 240); // blue
    g.drawString(content, w / 2, textY, Graphics.TOP | Graphics.HCENTER);

    g.drawString(BACK_HINT, w / 2, backHintY, Graphics.TOP | Graphics.HCENTER);
    }
}}}

The !CategoryBar in the Chrome and !CategoryBar example is handled by the main MIDlet class. It shows and hides the !CategoryBar when necessary:

{{{
public void commandAction(Command c, Displayable d) {
    Displayable displayable = null;
    ExampleCanvas canvas = null;
    int i = canvasList.getSelectedIndex();

    if (c == List.SELECT_COMMAND) {
        switch (i) {
            default:
            case CHROME_AND_CATEGORY:
                canvas = new ExampleCanvas(TITLES[i] + "1", CONTENTS[i] + "1");
                setCategoryBarVisibility(true);
                break;
                ...
         }
    }
}
}}}

and

{{{
...
else if (c == Commands.BACK || c == Commands.INFORMATION_BACK) {
    backStack.back();

    // Toggle the CategoryBar visibility if necessary;
    // show it if coming back to CHROME_AND_CATEGORY view 
    // from the information view, otherwise hide it
    if (categoryBarWasVisible) {
        setCategoryBarVisibility(true);
        categoryBarWasVisible = false;
    }
    else {
        setCategoryBarVisibility(false);
    }
}
}}}

|| [[Image(/files/screenshots/canvas_statusbaronly_portrait.png)]] [[Image(/files/screenshots/canvas_statusbaronly_landscape.png)]] ||

The !ExampleCanvas can be set to utilise the whole screen, display status bar only, and so on. The status bar can be hidden as follows:

{{{
public void setStatusBarVisible(boolean visible) {
    Boolean v = (visible ? Boolean.TRUE : Boolean.FALSE);
    LCDUIUtil.setObjectTrait(this, "nokia.ui.canvas.status_zone", v);
}
}}}

and the Canvas can be taken to full screen:

{{{
public void setFullScreen(boolean fullScreen) {
    this.setFullScreenMode(fullScreen);
}
}}}

|| [[Image(/files/screenshots/canvas_fullscreen_portrait.png)]] [[Image(/files/screenshots/canvas_fullscreen_landscape.png)]] ||

=== Canvas text editor ===

The !TextEditor class can be used to add a text input field within a Canvas. Note that the !TextEditor class provides only the skeleton for the text editor, and the look and behaviour of the !TextEditor need to be customised. The !TextEditor is created and shown in !TextEditorCanvas that extends !ExampleCanvas:

{{{
private void createAndShowTextEditor() {
    Font font = Font.getDefaultFont();
    textEditorRect = new Rectangle(MARGIN + 2, // x
        4 * font.getHeight() + 2 * MARGIN + 2, // y
        this.getWidth() - 2 * MARGIN, // width
        font.getHeight()); // height
    textEditor = SafeTextEditor.createTextEditor(); 
    textEditor.setMaxSize(MAX_CHARS);
    textEditor.setConstraints(TextField.ANY);
    textEditor.setSize(textEditorRect.width, textEditorRect.height);
    textEditor.setParent(this);
    textEditor.setPosition(textEditorRect.x, textEditorRect.y);
    textEditor.setBackgroundColor(0xFFFFFFFF);
    textEditor.setForegroundColor(0xFF000000);
    textEditor.setConstraints(TextField.NON_PREDICTIVE);
    textEditor.setTextEditorListener(this);
    textEditor.setVisible(true);
    textEditor.setContent(DEFAULT_TEXT);
}
}}}

The virtual keyboard type can be set by adjusting the constraints of the !TextEditor. The typically needed constraints are as follows: 

 * ANY for the regular keyboard, accepts all text.
 * DECIMAL for decimal numbers.
 * EMAILADDR for email addresses.
 * PASSWORD for entering passwords (regular keyboard, but input is masked).
 * PHONENUMBER for entering phone numbers.
 * URL for entering URLs. 

More can be found in the Javadoc documentation of the !TextEditor class. 

|| [[Image(/files/screenshots/auicd_1.0.0_canvas_texteditor_portrait.png)]] [[Image(/files/screenshots/auicd_1.0.0_canvas_texteditor_landscape.png)]] ||
|| [[Image(/files/screenshots/auicd_1.0.0_canvas_texteditor_edit_portrait.png)]] [[Image(/files/screenshots/canvas_texteditor_edit_landscape.png)]] ||